/*
Copyright 2022 The kubeall.com Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kube_all.api.cluster.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kube-all/api/cluster/v1alpha1";

// Cluster is the schema for the clusters API
message Cluster {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ClusterSpec spec = 2;

  optional ClusterStatus status = 3;
}

// ClusterConfig cluster
message ClusterConfig {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ClusterConfigSpec spec = 2;

  optional ClusterConfigStatus status = 3;
}

// ClusterConfigList contains a list of Config
message ClusterConfigList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ClusterConfig items = 2;
}

message ClusterConfigSpec {
  optional string description = 2;

  optional string data = 3;
}

message ClusterConfigStatus {
  optional bool available = 1;

  optional bytes encryptData = 2;
}

message ClusterList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Cluster items = 2;
}

message ClusterNamespace {
  // +kubebuilder:validation:Required
  optional string cluster = 1;

  repeated string namespaces = 2;
}

// ClusterProfile cluster
message ClusterProfile {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ClusterProfileSpec spec = 2;

  optional ClusterProfileStatus status = 3;
}

message ClusterProfileList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ClusterProfile items = 2;
}

message ClusterProfileSpec {
  // +kubebuilder:validation:Required
  optional string clusterRef = 1;

  // +kubebuilder:validation:Required
  optional string prometheusConfigMapRef = 2;

  // +kubebuilder:validation:Required
  optional string grafanaConfigMapRef = 3;

  // +kubebuilder:validation:Required
  optional string harborConfigMapRef = 4;
}

message ClusterProfileStatus {
}

message ClusterSpec {
  // cluster code
  // +kubebuilder:validation:Required
  optional string code = 1;

  // Provider of the cluster: Openshift, Kubernetes, or other cloud providers
  // +kubebuilder:validation:Required
  optional string provider = 2;

  // cluster category, such as: Strict、NonStrict、Dev、Test、Pro
  // +kubebuilder:validation:Required
  optional string category = 3;

  // cluster region
  // +optional
  optional string region = 4;

  //  cluster description
  // +optional
  optional string description = 5;

  // cluster master url
  // +kubebuilder:validation:Required
  optional string master = 6;

  optional string kubeConfig = 7;

  // +optional
  optional string token = 8;

  // +optional
  optional string certificateAuthorityData = 9;
}

message ClusterStatus {
  // manager cluster, will auto judge
  // +optional
  optional bool isManager = 10;

  // +optional
  optional bool healthy = 11;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastCheck = 12;

  // kubernetes version
  // +optional
  optional Version version = 13;

  // cluster sa token
  // +optional
  optional bytes encryptedToken = 14;

  // +optional
  optional string hash = 8;

  // +optional
  repeated string namespaces = 9;

  // cluster  kubeconfig
  // +optional
  optional bytes encryptedKubeConfig = 15;

  // +optional
  optional bytes encryptedCertificateAuthorityData = 16;
}

// DeployTemplate  specify workspace resource and namespace number,
message DeployTemplate {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional string description = 2;

  repeated k8s.io.apimachinery.pkg.runtime.RawExtension objects = 3;

  // +optional
  repeated Parameter parameters = 4;

  // +optional
  map<string, string> objectLabels = 5;

  // +kubebuilder:default:=5
  optional int32 history = 6;
}

// DeployTemplateList contains a list of Config
message DeployTemplateList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated DeployTemplate items = 2;
}

message Parameter {
  optional string name = 1;

  optional string displayName = 2;

  optional string description = 3;

  optional string value = 4;

  // +optional
  optional string generate = 5;

  // +optional
  optional string from = 6;

  // +optional
  optional bool required = 7;
}

message Version {
  // +optional
  optional string major = 1;

  // +optional
  optional string minor = 2;

  // +optional
  optional string gitVersion = 3;

  // +optional
  optional string gitCommit = 4;

  // +optional
  optional string gitTreeState = 5;

  // +optional
  optional string buildDate = 6;

  // +optional
  optional string goVersion = 7;

  // +optional
  optional string compiler = 8;

  // +optional
  optional string platform = 9;

  // +optional
  optional string version = 10;
}

// Workspace is the Schema for the namespace groups API, use workspace name as namespace label value
message Workspace {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional WorkspaceSpec spec = 2;

  optional WorkspaceStatus status = 3;
}

// WorkspaceList contains a list of Workspace
message WorkspaceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Workspace items = 2;
}

// WorkspaceResourceQuota  specify workspace resource and namespace number,
message WorkspaceResourceQuota {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional WorkspaceResourceQuotaSpec spec = 2;

  optional WorkspaceResourceQuotaStatus status = 3;
}

// WorkspaceResourceQuotaList contains a list of Config
message WorkspaceResourceQuotaList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated WorkspaceResourceQuota items = 2;
}

message WorkspaceResourceQuotaSpec {
  // WorkspaceRef is equal WorkspaceResourceQuota name
  // +kubebuilder:validation:Required
  optional string workspaceRef = 1;

  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> hard = 2;

  optional int64 namespaceNumber = 3;

  // namespace can be created in cluster
  // +kubebuilder:validation:Required
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector clusterSelector = 4;
}

message WorkspaceResourceQuotaStatus {
}

message WorkspaceSpec {
  // workspace code
  // +kubebuilder:validation:Required
  optional string code = 1;

  // workspace description
  // +kubebuilder:validation:Required
  optional string description = 2;

  // workspace users
  // +optional
  repeated WorkspaceUser users = 3;

  // cascade delete, if true when delete cluster will delete all resource belong this workspace, including namespace
  // +optional
  optional bool cascadeDelete = 4;
}

// WorkspaceStatus defines the observed state of Workspace
message WorkspaceStatus {
  // cluster's namespaces
  // +optional
  repeated ClusterNamespace clusterNamespaces = 1;

  // all namespaces
  // +optional
  repeated string namespaces = 2;
}

message WorkspaceUser {
  // ref kubeuser
  // +kubebuilder:validation:Required
  optional string userRef = 1;

  // ref workspace role
  // +optional
  repeated string workspaceRoles = 2;
}

